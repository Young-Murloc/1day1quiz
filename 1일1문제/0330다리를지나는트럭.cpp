/*
트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.
※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다.

예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

경과 시간	다리를 지난 트럭	다리를 건너는 트럭	대기 트럭
0	[]	[]	[7,4,5,6]
1~2	[]	[7]	[4,5,6]
3	[7]	[4]	[5,6]
4	[7]	[4,5]	[6]
5	[7,4]	[5]	[6]
6~7	[7,4,5]	[6]	[]
8	[7,4,5,6]	[]	[]
따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.

solution 함수의 매개변수로 다리 길이 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.

다리에 대기하던 트럭이 전부 올라간 경우 ->
    여태까지 걸린 시간 + 다리 길이를 더하면 마지막 트럭이 다리를 건너는 시간을 계산 할 수 있음

deque 혹은 list로 해결
*/

#include <string>
#include <vector>
#include <queue>

using namespace std;

int solution(int bridge_length, int weight, vector<int> truck_weights) {
    int answer = 0;             // 시간
    queue<int> bridge;          // 다리   push(뒤) pop(앞)
    int remain = weight;

    for (int i = 0; i < bridge_length; i++) {
        bridge.push(0);
    }

    while (true) {
        if (bridge.front() != 0) {
            remain += bridge.front();
        }

        bridge.pop();

        if (truck_weights.front() <= remain) {
            remain -= truck_weights.front();
            bridge.push(truck_weights.front());
            truck_weights.erase(truck_weights.begin());
        }
        else {
            bridge.push(0);
        }

        answer++;

        if (truck_weights.empty()) {
            answer += bridge_length;
            break;
        }
    }

    return answer;
}